class Solution {
    public int search(int[] nums, int target) {
        // Step 1: Initialize two pointers: left and right
        int left = 0;               // Start pointer at the beginning of the array
        int right = nums.length - 1; // End pointer at the end of the array

        // Step 2: Perform binary search
        while (left <= right) { 
            // Calculate the middle index
            int mid = left + (right - left) / 2; // Prevents integer overflow

            // Step 3: Check if the target is at the middle index
            if (nums[mid] == target) {
                return mid; // If found, return the index
            }

            // Step 4: Narrow down the search range
            if (nums[mid] < target) {
                left = mid + 1; // Target is in the right half
            } else {
                right = mid - 1; // Target is in the left half
            }
        }

        // Step 5: If target is not found, return -1
        return -1;
    }
}
